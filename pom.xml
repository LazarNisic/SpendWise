<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.0.4</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.ldz</groupId>
    <artifactId>SpendWise</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>AnalizaPotrosnje</name>
    <description>Aplikacija za anlizu potrosnje</description>

    <properties>
        <java.version>17</java.version>
        <maven.test.skip>true</maven.test.skip>
        <ojdbc8.version>21.9.0.0</ojdbc8.version>
        <lombok.version>1.18.26</lombok.version>
        <mapstruct.version>1.5.3.Final</mapstruct.version>
        <springdoc-openapi-starter-webmvc-ui.version>2.0.4</springdoc-openapi-starter-webmvc-ui.version>
        <flyway.version>4.2.0</flyway.version>
        <apache-poi.version>5.2.3</apache-poi.version>
        <datasource-proxy-spring-boot-starter.version>1.9.0</datasource-proxy-spring-boot-starter.version>
        <jjwt.version>0.11.5</jjwt.version>
        <jackson.version>2.14.2</jackson.version>
        <hazelcast.version>5.2.2</hazelcast.version>
        <hypersistence-utils.version>3.3.0</hypersistence-utils.version>
        <tika-core.version>2.7.0</tika-core.version>
        <tika-parser-image-module.version>2.7.0</tika-parser-image-module.version>
        <commons-imaging.version>1.0-alpha3</commons-imaging.version>
        <hibernate-validator.version>8.0.0.Final</hibernate-validator.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
<!--        This dependency pulls in all the necessary libraries for building reactive web applications using the Spring Framework, including the reactive web runtime, HTTP client, and codec support.-->
<!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-starter-webflux</artifactId>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-starter-websocket</artifactId>-->
<!--        </dependency>-->

<!--       This dependency pulls in all the necessary libraries for adding actuator endpoints to a Spring Boot application, including health checks, metrics, and other useful information about the running application. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- JWT -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>${jjwt.version}</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>${jjwt.version}</version>
        </dependency>
        <!-- JWT -->

        <!--Jackson dependencies-->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-parameter-names</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jdk8</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <!--Jackson dependencies-->

<!--         With this dependency, you can use Hazelcast as a distributed cache or distributed data store within your Spring-based application.-->
        <dependency>
            <groupId>com.hazelcast</groupId>
            <artifactId>hazelcast-spring</artifactId>
            <version>${hazelcast.version}</version>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>
<!--        This dependency is used to generate OpenAPI 3 documentation for Spring Boot applications using WebMvc. It includes the Swagger UI interface, which provides an interactive documentation of the API.-->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc-openapi-starter-webmvc-ui.version}</version>
        </dependency>
<!--        This dependency adds support for auditing data changes with Hibernate ORM framework. -->
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-envers</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>${flyway.version}</version>
        </dependency>
<!--        The datasource-proxy-spring-boot-starter dependency is used to intercept and profile SQL queries executed by a Spring Boot application. It provides a lightweight way to monitor and log SQL statements without modifying application code.his information can be useful for performance analysis and debugging.-->
<!--        todo Configure the data source to use the DataSourceProxy in the application.properties file-->
        <dependency>
            <groupId>com.github.gavlyukovskiy</groupId>
            <artifactId>datasource-proxy-spring-boot-starter</artifactId>
            <version>${datasource-proxy-spring-boot-starter.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
<!--        This dependency is for the Apache POI library's OOXML module, which provides support for reading and writing Microsoft Office Open XML (OOXML) file formats like .docx, .pptx, .xlsx, etc. in Java applications.
Example:
Suppose you have an application that generates an Excel spreadsheet dynamically based on some data. To create and populate the Excel file, you can use the Apache POI library's poi-ooxml module. -->
<!--        <dependency>-->
<!--            <groupId>org.apache.poi</groupId>-->
<!--            <artifactId>poi-ooxml</artifactId>-->
<!--            <version>${apache-poi.version}</version>-->
<!--        </dependency>-->

<!--        The dependency provides utility classes that help with various aspects of working with Hibernate, such as improving entity mapping, optimizing SQL queries, and reducing boilerplate code.-->
<!--        <dependency>-->
<!--            <groupId>io.hypersistence</groupId>-->
<!--            <artifactId>hypersistence-utils-hibernate-60</artifactId>-->
<!--            <version>${hypersistence-utils.version}</version>-->
<!--        </dependency>-->


<!--        The tika-core library provides the core functionality of the Apache Tika toolkit, including the detection and extraction of metadata and text content from various file formats.-->
<!--        <dependency>-->
<!--            <groupId>org.apache.tika</groupId>-->
<!--            <artifactId>tika-core</artifactId>-->
<!--            <version>${tika-core.version}</version>-->
<!--        </dependency>-->
<!--        The tika-parser-image-module module provides parsers for image formats supported by Tika, such as JPEG, PNG, and BMP. This module is necessary if you want to extract metadata and text content from image files using Tika.-->
<!--        <dependency>-->
<!--            <groupId>org.apache.tika</groupId>-->
<!--            <artifactId>tika-parser-image-module</artifactId>-->
<!--            <version>${tika-parser-image-module.version}</version>-->
<!--        </dependency>-->
        <!--		dependency for read and write image files(JPEG, PNG..)-->
        <!--		<dependency>-->
        <!--			<groupId>org.apache.commons</groupId>-->
        <!--			<artifactId>commons-imaging</artifactId>-->
        <!--			<version>${commons-imaging.version}</version>-->
        <!--		</dependency>-->
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${hibernate-validator.version}</version>
        </dependency>

<!--        swagger2-->
<!--        <dependency>-->
<!--            <groupId>io.springfox</groupId>-->
<!--            <artifactId>springfox-swagger2</artifactId>-->
<!--            <version>2.9.2</version>-->
<!--        </dependency>-->

<!--        <dependency>-->
<!--            <groupId>io.springfox</groupId>-->
<!--            <artifactId>springfox-swagger-ui</artifactId>-->
<!--            <version>2.9.2</version>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>io.springfox</groupId>-->
<!--            <artifactId>springfox-boot-starter</artifactId>-->
<!--            <version>3.0.0</version>-->
<!--        </dependency>-->


    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>build-info</id>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
